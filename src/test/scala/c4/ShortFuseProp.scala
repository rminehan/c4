package c4

import org.scalacheck.Properties
import org.scalacheck.Prop.forAll
import C4ParUtils.C4ExecutionContext
import ShortFuse.Ops

class ShortFuseProp extends Properties("ShortFuseProp") {
  implicit val ec: C4ExecutionContext = C4ExecutionContext(parallelism = 4)

  // TODO - could add more checks here - this is enough for a prototype
  // Should also check how it handles errors generated by f
  property("shortFuse.map.boom == regular map") = forAll { array: Array[Int] =>
    array.map(_ * 2).sameElements(array.shortFuse.map(_ * 2).boom)
  }

  property("shortFuse.map.parBoom == regular map") = forAll { array: Array[Int] =>
    array.map(_ * 2).sameElements(array.shortFuse.map(_ * 2).parBoom)
  }

  property("shortFuse.filter.boom == regular filter") = forAll { array: Array[Int] =>
    array.filter(_ > 10).sameElements(array.shortFuse.filter(_ > 10).boom)
  }

  property("shortFuse.filter.parBoom == regular filter") = forAll { array: Array[Int] =>
    array.filter(_ > 10).sameElements(array.shortFuse.filter(_ > 10).parBoom)
  }

  property("shortFuse.map.filter.map.boom == regular map.filter.map") = forAll { array: Array[Int] =>
    array.map(_ * 5).filter(_ > 10).map(_ / 2).sameElements(
      array.shortFuse.map(_ * 5).filter(_ > 10).map(_ / 2).boom
    )
  }

  property("shortFuse.map.filter.map.parBoom == regular map.filter.map") = forAll { array: Array[Int] =>
    array.map(_ * 5).filter(_ > 10).map(_ / 2).sameElements(
      array.shortFuse.map(_ * 5).filter(_ > 10).map(_ / 2).parBoom
    )
  }
}